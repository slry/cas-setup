events {
    worker_connections 768;
}


http {

    sendfile on;
    tcp_nopush on;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    gzip on;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }


{% if certbot_step is defined and certbot_step >= 2 %}
    # Redirect from HTTP to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name {{ domain }};

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }
{% endif %}


    server {
        server_name {{ domain }};

{% if certbot_step is defined and certbot_step >= 2 %}
        listen 443 default_server ssl http2;
        listen [::]:443 ssl http2;
        ssl_certificate /etc/nginx/ssl/live/{{ domain }}/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/{{ domain }}/privkey.pem;

        add_header "Content-Security-Policy" "upgrade-insecure-requests";
{% else %}
        listen 80 default_server;
        listen [::]:80 default_server;
{% endif %}

{% if certbot_step is defined and certbot_step >= 1 %}
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
{% endif %}

        # Use Docker DNS
        resolver 127.0.0.11 valid=10s;


        location / {
            autoindex on;
            root  /var/www/html/dashboard;
        }

        include /etc/nginx/includes/*.conf;
    }

{% if install["dev_logger"] and dev_logger_supabase_subdomain is defined and certbot_step is defined and certbot_step >= 2 %}
    server {
      server_name {{ dev_logger_supabase_subdomain }}.{{ domain }};

      listen 443 ssl http2;
      listen [::]:443 ssl http2;

      ssl_certificate /etc/nginx/ssl/live/{{ domain }}/fullchain.pem;
      ssl_certificate_key /etc/nginx/ssl/live/{{ domain }}/privkey.pem;

      location / {
        # Use Docker DNS
        resolver 127.0.0.11 valid=10s;
        proxy_pass http://kong:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }
    }
{% endif %}

{% if install["dev_logger"] and dev_logger_subdomain is defined and certbot_step is defined and certbot_step >= 2 %}
    server {
      server_name {{ dev_logger_subdomain }}.{{ domain }};

      listen 443 ssl http2;
      listen [::]:443 ssl http2;

      ssl_certificate /etc/nginx/ssl/live/{{ domain }}/fullchain.pem;
      ssl_certificate_key /etc/nginx/ssl/live/{{ domain }}/privkey.pem;

      location / {
        # Use Docker DNS
        resolver 127.0.0.11 valid=10s;
        proxy_pass http://dev-logger-app:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }
    }
{% endif %}

    server {
        server_name {{ domain }}:{{ gitlab_registry_port }};

{% if certbot_step is defined and certbot_step >= 2 %}
        listen {{ gitlab_registry_port }} default_server ssl http2;
        listen [::]:{{ gitlab_registry_port }} ssl http2;
        ssl_certificate /etc/nginx/ssl/live/{{ domain }}/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/{{ domain }}/privkey.pem;
{% else %}
        listen {{ gitlab_registry_port }} default_server;
        listen [::]:{{ gitlab_registry_port }} default_server;
{% endif %}

        # Use Docker DNS
        resolver 127.0.0.11 valid=10s;

        # Gitlab container registry
        location / {
            proxy_pass http://gitlab:{{ gitlab_registry_port }};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host:$server_port;
            proxy_read_timeout 900;
            client_max_body_size 1G;
        }
    }

}
